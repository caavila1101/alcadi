# "org" ensures this Service is used with the correct Serverless Framework Access Key.
org: alcadii
# "app" enables Serverless Framework Dashboard features and sharing them with other Services.
app: mvp
# "service" is the name of this project. This will also be added to your AWS resource names.
service: mvp

params:
  default:
    playersTable: "players-table-${sls:stage}"

plugins:
  - serverless-dynamodb-local
  - serverless-offline
package:
  individually: true
  patterns: 
    - "!.dynamo.db" 
    - "!.node_modules"

provider:
  name: aws
  runtime: nodejs20.x
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
          Resource:
            - Fn::GetAtt: [UsersTable, Arn] #está obteniendo el ARN (Amazon Resource Name) de la tabla UsersTable. Esto significa que los permisos se aplican únicamente a la tabla DynamoDB creada en resources.
  environment:
    PLAYERS_TABLE: ${param:playersTable}
    DYNAMODB_ENDPOINT: http://localhost:8000 # Para conectarse a DynamoDB local
    #AWS_ACCESS_KEY_ID: ${env:AWS_ACCESS_KEY_ID}
    #AWS_SECRET_ACCESS_KEY: ${env:AWS_SECRET_ACCESS_KEY}


functions:
  get-users:
    handler: players/get/handler.getPlayers
    events:
      - http:
          path: players/{id}
          method: GET
  create-players:
    handler: players/create/handler.createPlayer
    events:
      - http:
          path: players
          method: POST
  update-players:
    handler: players/update/handler.updatePlayer
    events:
      - http:
          path: players/{id}
          method: PUT

resources:
  Resources:
    PlayersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${param:playersTable}
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: playerId
            AttributeType: S
           #- AttributeName: currentTeam
           #  AttributeType: S
        KeySchema:
          - AttributeName: playerId
            KeyType: HASH  # Partition Key
          #- AttributeName: currentTeam
           #  KeyType: RANGE  # Sort Key

custom:
  dynamodb:
    stages:
      - offline
      - dev
    start:
      port: 8000
      inMemory: true
      migrate: true 
      noStart: true  # Evita que Serverless intente iniciar DynamoDB
      host: 127.0.0.1